git config --global alias.changes '!f(){ show_help() { echo "Usage: git changes [branch] [options]"; echo ""; echo "Lists commits on the current branch that are not in the project'\''s default branch."; echo ""; echo "Arguments:"; echo "  [branch]    Optional. Specify a branch to compare against instead of the default."; echo ""; echo "Options:"; echo "  -t, --timestamp    Display full timestamps instead of relative dates."; echo "  -h, --help         Display this help message."; }; DATE_FORMAT="relative"; CUSTOM_REF=""; while [ $# -gt 0 ]; do case "$1" in -h|--help) show_help; return;; -t|--timestamp) DATE_FORMAT="iso"; shift;; *) if [ -n "$CUSTOM_REF" ]; then echo "Error: Only one branch can be provided." >&2; return 1; fi; CUSTOM_REF="$1"; shift;; esac; done; git fetch origin >/dev/null 2>&1; DEFAULT_BRANCH_REF=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null); if [ -z "$DEFAULT_BRANCH_REF" ]; then if git show-ref --verify --quiet refs/remotes/origin/main; then DEFAULT_BRANCH_REF="refs/remotes/origin/main"; elif git show-ref --verify --quiet refs/remotes/origin/master; then DEFAULT_BRANCH_REF="refs/remotes/origin/master"; else echo "Error: Could not determine the default remote branch." >&2; return 1; fi; fi; DEFAULT_BRANCH=$(echo "$DEFAULT_BRANCH_REF" | sed "s!^.*/!!"); COMPARE_BRANCH="$DEFAULT_BRANCH"; if [ -n "$CUSTOM_REF" ]; then COMPARE_BRANCH="$CUSTOM_REF"; fi; git log --pretty=format:"%C(yellow)%h %ad %C(reset)%s %C(green)(%an)" --date=$DATE_FORMAT origin/$COMPARE_BRANCH..HEAD; }; f'
