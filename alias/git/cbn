git config --global alias.cbn '!f(){ show_help() { echo "Usage: git cbn [options]"; echo ""; echo "Options:"; echo "  -m, --message <msg>    Provide a custom commit message body."; echo "  -op, --omit-prefix     Omit the prefix (e.g., ticket number) from the commit."; echo "  -h, --help             Display this help message."; }; CT="feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert"; error_exit() { RED='\''\033[0;31m'\''; NC='\''\033[0m'\''; echo "${RED}Error: $1${NC}" >&2; return 1; }; CUSTOM_MESSAGE=""; OMIT_PREFIX=false; while [ $# -gt 0 ]; do case "$1" in -h|--help) show_help; return;; -m|--message) if [ -z "$2" ]; then error_exit "The '\''$1'\'' flag requires a message."; return; fi; CUSTOM_MESSAGE="$2"; shift; shift;; -op|--omit-prefix) OMIT_PREFIX=true; shift;; *) error_exit "Unknown option: $1"; return;; esac; done; BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); if [ -z "$BRANCH_NAME" ]; then error_exit "Could not determine branch name."; return; fi; COMMIT_TYPE=$(echo "$BRANCH_NAME" | grep -oE "($CT)" | head -n 1); if [ -z "$COMMIT_TYPE" ]; then error_exit "No conventional commit type ($CT) found in branch '\''$BRANCH_NAME'\''."; return; fi; case "$BRANCH_NAME" in *-$COMMIT_TYPE-*) PREFIX=$(echo "$BRANCH_NAME" | sed -n "s/-\($COMMIT_TYPE\)-.*//p"); DESCRIPTION=$(echo "$BRANCH_NAME" | sed -n "s/.*-\($COMMIT_TYPE\)-//p");; $COMMIT_TYPE-*) PREFIX=""; DESCRIPTION=$(echo "$BRANCH_NAME" | sed -n "s/^\($COMMIT_TYPE\)-//p");; *) error_exit "Branch format invalid. Use '\''[PREFIX-]<type>-<desc>'\'' or '\''<type>-<desc>'\''."; return;; esac; DESCRIPTION=$(echo "$DESCRIPTION" | sed "s/-/ /g"); if [ -n "$CUSTOM_MESSAGE" ]; then MSG_BODY="$CUSTOM_MESSAGE"; else if [ -z "$DESCRIPTION" ]; then error_exit "Branch name must include a description after the type."; return; fi; MSG_BODY="$DESCRIPTION"; fi; COMMIT_PREFIX=""; if [ -n "$PREFIX" ] && [ "$OMIT_PREFIX" = false ]; then COMMIT_PREFIX="$PREFIX - "; fi; COMMIT_MESSAGE="${COMMIT_PREFIX}${COMMIT_TYPE}: ${MSG_BODY}"; echo "Running: git commit -m \"$COMMIT_MESSAGE\""; git commit -m "$COMMIT_MESSAGE"; }; f'